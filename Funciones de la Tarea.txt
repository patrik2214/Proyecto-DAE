CREATE OR REPLACE FUNCTION Listar_deuda(documento varchar(11))RETURNS TABLE(Cliente VARCHAR(80),numventa integer, pago integer, fecha date, monto decimal(8,2),estado boolean) AS
$$
DECLARE

BEGIN
	RETURN query
	SELECT cliente.nombres,pago.numventa,pago.codpago,pago.fecha_programada,pago.monto,pago.estado 
	FROM pago
	INNER JOIN venta on venta.numventa=pago.numventa 
	INNER JOIN cliente on cliente.codcliente=venta.codcliente
	WHERE pago.tipo='credito' and cliente.dni=documento or cliente.ruc=documento;
END;
$$LANGUAGE'plpgsql'


SELECT * FROM Listar_deuda('72120524')


CREATE OR REPLACE FUNCTION deuda(documento varchar(11))RETURNS int AS
$$
DECLARE
	dato int;
BEGIN
	SELECT COUNT(*)into dato FROM pago
	INNER JOIN venta on venta.numventa=pago.numventa 
	INNER JOIN cliente on cliente.codcliente=venta.codcliente
	WHERE pago.tipo='credito' and cliente.dni=documento or cliente.ruc=documento;
	RETURN dato;
	
END;
$$LANGUAGE'plpgsql'



select*from cliente

CREATE OR REPLACE FUNCTION fn_cliente(dni char(8),ruc char(11),nombre varchar(30),telefono varchar(13),correo varchar(50),direccion varchar(50),vigencia boolean,tipo integer)RETURNS void AS
$$
DECLARE
	cant integer;
BEGIN
	SELECT COUNT(*) INTO cant FROM cliente WHERE nombres=nombre;
	IF(cant=0)THEN
	
		IF (tipo=1)THEN
		INSERT INTO cliente VALUES((SELECT COALESCE(max(codCliente),0)+1 from CLIENTE), dni,NULL,nombre,telefono,correo,direccion,vigencia,tipo);
		END IF;
		
		IF (tipo=2)THEN
		INSERT INTO cliente VALUES((SELECT COALESCE(max(codCliente),0)+1 from CLIENTE), NULL,ruc,nombre,telefono,correo,direccion,vigencia,tipo);
		END IF;
		
		IF (tipo=3)THEN
		INSERT INTO cliente VALUES((SELECT COALESCE(max(codCliente),0)+1 from CLIENTE), dni,ruc,nombre,telefono,correo,direccion,vigencia,tipo);
		END IF;
		
	END IF;
END;
$$LANGUAGE'plpgsql'

SELECT fn_cliente(NULL,'12345678911','Emanuel Chavez','111111111','mchavez@gmail.com','Los manzanos 111',true,2);


CREATE TABLE cambio(
codcambio integer primary key,
producto1 integer not null,
producto2 integer not null,
fecha date

);

select * from detalle;

CREATE OR REPLACE FUNCTION cambio(codp1 integer,codp2 integer,cant integer,venta integer,des smallint)RETURNS void AS
$$
DECLARE
	c int;
	p decimal(8,2);
	sub decimal(8,2);
	
BEGIN
	SELECT cantidad INTO c FROM detalle WHERE codproducto=codp1 and numventa=venta;
	UPDATE producto SET stock=stock+c WHERE codproducto=codp1;
	DELETE FROM detalle WHERE  codproducto=codp1 and numventa=venta;
	SELECT precio INTO p FROM producto WHERE codproducto=codp2;
	INSERT INTO detalle VALUES(venta,codp2,cant,p,des,(p*cant),false);
	SELECT SUM(subtotal)into sub FROM detalle WHERE numventa=venta;
	UPDATE venta SET igv=0.18*sub, subtotal=sub-igv,total=sub WHERE numventa=venta;
	INSERT INTO cambio VALUES((SELECT COALESCE(max(codcambio),0)+1 from cambio),codp1,codp2,CURRENT_DATE);
	
END;
$$LANGUAGE'plpgsql'


CREATE OR REPLACE FUNCTION fn_venta()RETURNS table(totalv bigint,monto_total numeric(8,2),monto_max numeric(8,2),monto_min numeric(8,2))  AS
$$
DECLARE

BEGIN
	RETURN query
	SELECT COUNT(*) ,SUM(total) ,(SELECT MAX(total)), (SELECT MIN(total)) FROM venta;
	
END;
$$LANGUAGE'plpgsql'


CREATE OR REPLACE FUNCTION fn_Mo(v int)RETURNS table(Numero int,fecha date, cliente varchar(30), total numeric(8,2),producto varchar(30),cantidad int,descuento smallint)  AS
$$
DECLARE
BEGIN
	RETURN query
	SELECT venta.numventa,venta.fecha,cliente.nombres,venta.total,producto.nomproducto,detalle.cantidad,detalle.descuento
	FROM cliente INNER JOIN (SELECT*FROM venta WHERE numventa=v)venta on venta.codcliente=cliente.codcliente
	INNER JOIN detalle on detalle.numventa=venta.numventa
	INNER JOIN producto on producto.codproducto=detalle.codproducto
	ORDER BY producto.nomproducto ASC;
	
	
END;
$$LANGUAGE'plpgsql'





CREATE OR REPLACE FUNCTION comprobante(codventa integer)RETURNS TABLE (Codigo integer,ClienteN varchar(80),dni char(8),ruc char(11),Producto varchar(30),Cantidad integer,Precio decimal(8,2),descuento smallint, subtotal decimal(8,2),fecha date,tipo boolean) AS
$$
DECLARE

BEGIN 
		RETURN query
		SELECT venta.numventa,cliente.nombres,cliente.direccion,cliente.dni,cliente.ruc,producto.nomproducto,detalle.cantidad,detalle.precioventa,detalle.descuento,detalle.subtotal,pago.fecha_pago,venta.tipocomprobante,comprobante.codcomprobante
		FROM cliente INNER JOIN venta ON cliente.codcliente=venta.codcliente
		INNER JOIN comprobante ON comprobante.numventa=venta.numventa 
		INNER JOIN pago ON pago.numventa=venta.numventa 
		INNER JOIN detalle ON detalle.numventa=venta.numventa
		INNER JOIN producto ON producto.codproducto=detalle.codproducto
		WHERE venta.numventa=2 and venta.estadopago=true;
	
END;
$$LANGUAGE'plpgsql'


SELECT *FROM comprobante(1)




--DROP FUNCTION comprobante(codventa integer)

CREATE TABLE comprobante(
codcomprobante integer primary key,
numventa integer not null references venta
);



SELECT*FROM comprobante


CREATE OR REPLACE FUNCTION comp()RETURNS trigger AS
$$
DECLARE
	dato int;
BEGIN
	INSERT INTO comprobante VALUES((SELECT COALESCE(max(codcomprobante),0)+1 from comprobante),new.numventa);
	RETURN new;
END;
$$LANGUAGE'plpgsql'

CREATE TRIGGER tg_comprobante after insert on venta
for each row execute procedure comp()

